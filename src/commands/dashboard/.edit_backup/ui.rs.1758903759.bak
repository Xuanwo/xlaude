use ratatui::{
    Frame,
    layout::{Alignment, Constraint, Direction, Layout, Rect},
    style::{Color, Modifier, Style},
    text::{Line, Span},
    widgets::{Block, Borders, List, ListItem, Paragraph, Wrap},
};
use crate::tmux::SessionInfo;
use super::state::{DashboardMode, DashboardState};
use super::dialogs::render_dialogs;

pub fn render(f: &mut Frame, state: &mut DashboardState, sessions: &[SessionInfo]) {
    if matches!(state.mode, DashboardMode::Help) {
        render_dialogs(f, state);
        return;
    }

    let chunks = Layout::default()
        .direction(Direction::Vertical)
        .constraints([
            Constraint::Length(1), // Menu bar
            Constraint::Min(10),   // Main content
            Constraint::Length(if state.status_message.is_some() { 3 } else { 2 }), // Help/status bar
        ])
        .split(f.area());

    render_menu_bar(f, chunks[0]);

    let main_chunks = Layout::default()
        .direction(Direction::Horizontal)
        .constraints([
            Constraint::Percentage(40), // Project list
            Constraint::Percentage(60), // Preview
        ])
        .split(chunks[1]);

    render_project_list(f, state, main_chunks[0]);
    render_preview(f, state, sessions, main_chunks[1]);
    render_status_bar(f, state, chunks[2]);

    render_dialogs(f, state);
}

fn render_menu_bar(f: &mut Frame, area: Rect) {
    let menu_bar = Paragraph::new(" 📂 xlaude: Dashboard").style(
        Style::default()
            .bg(Color::Rgb(68, 68, 68))
            .fg(Color::Rgb(250, 250, 250)),
    );
    f.render_widget(menu_bar, area);
}

fn render_project_list(f: &mut Frame, state: &mut DashboardState, area: Rect) {
    let mut items = Vec::new();
    let mut current_repo = String::new();
    state.list_index_map.clear();

    for (worktree_idx, worktree) in state.worktrees.iter().enumerate() {
        if worktree.repo != current_repo {
            current_repo = worktree.repo.clone();
            items.push(ListItem::new(Line::from(vec![Span::styled(
                format!("📁 {}", current_repo),
                Style::default()
                    .fg(Color::Blue)
                    .add_modifier(Modifier::BOLD),
            )])));
            state.list_index_map.push(None);
        }

        let (status, status_color) = if !worktree.has_session {
            ("◌", Color::DarkGray)
        } else {
            (
                worktree.claude_status.display_icon(),
                worktree.claude_status.color(),
            )
        };

        let item = Line::from(vec![
            Span::raw("  "),
            Span::styled(status, Style::default().fg(status_color)),
            Span::raw(" "),
            Span::raw(&worktree.name),
        ]);

        items.push(ListItem::new(item));
        state.list_index_map.push(Some(worktree_idx));
    }

    let list = List::new(items)
        .block(
            Block::default()
                .borders(Borders::ALL)
                .title(" Projects (↑↓ to navigate) "),
        )
        .highlight_style(Style::default().bg(Color::DarkGray))
        .highlight_symbol("> ");

    f.render_stateful_widget(list, area, &mut state.list_state.clone());
}

fn render_preview(f: &mut Frame, state: &DashboardState, sessions: &[SessionInfo], area: Rect) {
    let worktree_idx = state.list_index_map.get(state.selected).and_then(|idx| *idx);

    if let Some(idx) = worktree_idx {
        if let Some(worktree) = state.worktrees.get(idx) {
            let mut lines = vec![
                Line::from(vec![
                    Span::styled("Project: ", Style::default().add_modifier(Modifier::BOLD)),
                    Span::raw(&worktree.name),
                ]),
                Line::from(vec![
                    Span::styled(
                        "Repository: ",
                        Style::default().add_modifier(Modifier::BOLD),
                    ),
                    Span::raw(&worktree.repo),
                ]),
                Line::from(""),
            ];

            let safe_name = worktree.name.replace(['-', '.'], "_");
            if let Some(session) = sessions
                .iter()
                .find(|s| s.project == safe_name || s.project == worktree.name)
            {
                render_session_info(&mut lines, session, worktree, state, area);
            } else {
                render_no_session(&mut lines);
            }

            let preview = Paragraph::new(lines)
                .block(Block::default().borders(Borders::ALL).title(" Details "))
                .wrap(Wrap { trim: true });

            f.render_widget(preview, area);
        }
    }
}

fn render_session_info(
    lines: &mut Vec<Line>,
    session: &SessionInfo,
    worktree: &super::state::WorktreeDisplay,
    state: &DashboardState,
    area: Rect,
) {
    lines.push(Line::from(vec![
        Span::styled("Session: ", Style::default().add_modifier(Modifier::BOLD)),
        Span::styled(
            if session.is_attached {
                "Attached"
            } else {
                "Background"
            },
            Style::default().fg(if session.is_attached {
                Color::Green
            } else {
                Color::Yellow
            }),
        ),
    ]));

    lines.push(Line::from(vec![
        Span::styled("Claude: ", Style::default().add_modifier(Modifier::BOLD)),
        Span::styled(
            format!(
                "{} {}",
                worktree.claude_status.display_icon(),
                worktree.claude_status.display_text()
            ),
            Style::default().fg(worktree.claude_status.color()),
        ),
    ]));

    lines.push(Line::from(vec![
        Span::styled("Created: ", Style::default().add_modifier(Modifier::BOLD)),
        Span::raw(SessionInfo::format_time(session.created_at)),
    ]));

    lines.push(Line::from(vec![
        Span::styled(
            "Last activity: ",
            Style::default().add_modifier(Modifier::BOLD),
        ),
        Span::raw(SessionInfo::format_time(session.last_activity)),
    ]));

    lines.push(Line::from(""));

    if !session.is_attached {
        if let Some(preview) = state.preview_cache.get(&worktree.name) {
            lines.push(Line::from(Span::styled(
                "Recent output:",
                Style::default().add_modifier(Modifier::BOLD),
            )));
            lines.push(Line::from("─".repeat(area.width as usize - 2)));

            for line in preview.lines().take(10) {
                lines.push(Line::from(line.to_string()));
            }
        }
    }
}

fn render_no_session(lines: &mut Vec<Line>) {
    lines.push(Line::from(vec![
        Span::styled("Session: ", Style::default().add_modifier(Modifier::BOLD)),
        Span::styled("Not running", Style::default().fg(Color::DarkGray)),
    ]));
    lines.push(Line::from(""));
    lines.push(Line::from(Span::styled(
        "Press Enter to start Claude session",
        Style::default()
            .fg(Color::DarkGray)
            .add_modifier(Modifier::ITALIC),
    )));
}

fn render_status_bar(f: &mut Frame, state: &DashboardState, area: Rect) {
    if let Some(ref status) = state.status_message {
        let help_chunks = Layout::default()
            .direction(Direction::Vertical)
            .constraints([
                Constraint::Length(1), // Status message
                Constraint::Length(1), // Help line
            ])
            .split(area);

        let status_widget =
            Paragraph::new(format!(" {}", status)).style(Style::default().fg(Color::Green));
        f.render_widget(status_widget, help_chunks[0]);

        render_help_line(f, help_chunks[1]);
    } else {
        render_help_line(f, area);
    }
}

fn render_help_line(f: &mut Frame, area: Rect) {
    let help = Paragraph::new(Line::from(vec![
        Span::raw(" "),
        Span::styled("Enter", Style::default().fg(Color::Yellow)),
        Span::raw(" Open  "),
        Span::styled("n", Style::default().fg(Color::Yellow)),
        Span::raw(" New  "),
        Span::styled("d", Style::default().fg(Color::Yellow)),
        Span::raw(" Stop  "),
        Span::styled("c", Style::default().fg(Color::Yellow)),
        Span::raw(" Config  "),
        Span::styled("r", Style::default().fg(Color::Yellow)),
        Span::raw(" Refresh  "),
        Span::styled("?", Style::default().fg(Color::Yellow)),
        Span::raw(" Help  "),
        Span::styled("q", Style::default().fg(Color::Yellow)),
        Span::raw(" Quit "),
    ]))
    .style(Style::default().fg(Color::DarkGray));
    f.render_widget(help, area);
}